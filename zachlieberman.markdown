# [Sharing Interviews](https://github.com/kylemcdonald/SharingInterviews/)

*This is the second interview in a series about creators sharing work, with an emphasis on open source, media art, and digital communities. The interviews are backed up on [GitHub](http://github.com/kylemcdonald/SharingInterviews/) after being conducted on PiratePad, where you can walk through the interview history [as it was written](http://j.mp/gERzlD). All content is licensed under a [Creative Commons Attribution 3.0 Unported License](http://creativecommons.org/licenses/by/3.0/).*

## with [Kyle McDonald](http://kylemcdonald.net/) interviewing [Zach Lieberman](http://thesystemis.com/)

### Who are you and what do you do?

I am an artist and educator, and have been working in the field of new media for the last 10 years or so.  I create performances, installations, workshops and events, give talks.  Most of my work involves using software, realtime or offline, as a central part of the work, so I'm also a programmer.  I co-founded an open source project called [openFrameworks](http://openframeworks.cc), a C++ library to help artists make projects.  I am a professor at [Parsons School of Design](http://amt.parsons.edu/) where I teach design students ways to work with computation, and see my role as quite simple -- demystify the art making process and help students better understand what they want to say, and how to say it.

### You're one of the most prolific sharers I know. From your work with openFrameworks and EyeWriter to the classes you teach where you write and share code with students. And you're not just giving people tools make things, but encouraging people to make things together. Why is sharing so important to you?

First, that's a great compliment, but my first response is humbly that I don't do nearly enough as I'd like to.

I'll start with some history, and conclude with why it's important. The history shows where my head is at with this. 

Teaching is essential to my work and identity really.  My father was a high school english teacher, my mother a Lamaze teacher, and I come from a family of educators and social workers so I guess you can say that's in my blood.  I remember how my father would talk about books such as Catcher in the Rye or Macbeth, and small insights that students were having about them.  When we would drive to school together, my father would recite T.S. Elliot poems and I remember that the books and ideas he was working with students on were always in the air.  That had a huge impact on me. 

When I got to graduate school, I had already discovered code, and had self taught myself Flash / ActionScript (at that time, Flash 4), which was relatively new.  I remember hosting workshops for my classmates to show them cool things you could do, and the joy of sharing.  I was really inspired by the early flash community:  [Joshua Davis](http://www.joshuadavis.com/), [Amit Pitaru](http://pitaru.com/), [Yugo Nakamura](http://www.yugop.com/). Also folks like [James Tindall](http://www.atomless.com/) and [Lia](http://www.liaworks.com/category/theprojects/).  What caught me about their works was animation, making something come to life, in this case programmatically.  Later I got to know about the [MIT Media Lab](http://www.media.mit.edu/) and see [Golan Levin](http://flong.com/) perform at [SVA](http://www.schoolofvisualarts.edu/) in 2000 or 2001.  All this had a profound impact on me.  The deeper I got into the culture, the more I wanted to spread that info to people around me.  It's a very simple message:  "This isn't hard."

I think that is a fundamental condition to working with technology.  There are just so many pieces to know about and how they fit together, it seems to me an inherently collaborative medium and one which we should actively work to demystify and to lower the barrier to entry.  Good tools do that. 

Fast forward to about 2003.  I graduated from Parsons, and started to work with Golan, a professor of mine.  This was an amazing break, a teacher basically saying, I respect you enough to treat you as an equal.  We started making projects like [Re:MARK](http://www.youtube.com/watch?v=yFzSk8YGSuo) and [Messa di Voce](http://www.youtube.com/watch?v=STRMcmj-gHc).  In 2003, at Ars Electronica, the theme was [CODE](http://90.146.8.18/de/archives/festival_archive/festival_overview.asp?iPresentationYearFrom=2003), and I remember everywhere leading up to that festival and at the festival,  there was this critical energy around open source, and people were asking us, "why don't you open source your work?"  I remember our initial response was, Oh, these are just free software fanatics, we shouldn't take them seriously.  What good would some messy, sleep deprived, full of hack source code be to anybody?  What it would it mean if some strangers in another country could perform our work?  Wouldn't that take away from it being art?   We responded by pointing to people like [Paul Bourke](http://local.wasp.uwa.edu.au/~pbourke/) prolific sharers and suggesting that as a model -- distilling down what you know into reusable ideas.  

Now that I think about it, this conflict / energy had a pretty profound impact on me.

I was also teaching after I graduated, which was a good counterpoint to the rootlessness of traveling once or twice a month to media art festivals.  I think it was the early days of Processing -- which I started to teach with -- but at the same time, I was trying to find ways to help my students make work that I was making in the outside world.  I loved code as a launching off point for talking about different disciplines, mathematics such as trigonometry, signal processing, animation, color, visual perception, auditory perception.  I wanted to be able to show examples and have the students push them in different ways.  Golan and I had been developing our work in a library called ACU, a closed source C++ library that was developed in house at the MIT Media lab's Aesthetic and Computation Group.  I couldn't give my students ACU to work with, so I developed openFrameworks as an open source alternative. 

I remember a lot of drama with the department head at the beginning, "art students don't want to learn C++".  There was also a bit of friction, creatively, between Golan and I.  I remember I was moving more heavily towards putting code out there, but Golan was, as I recall, a bit more of the mindset that people should have to put the work in.  We had some discussions back and forth about this.  At any rate, teaching openFrameworks at school was a huge success, and students like [Evan Roth](http://evan-roth.com/), [Chris Sugrue](http://csugrue.com/), [Theo Watson](http://theowatson.com/) came out of those years making really impactful work, making things like Graffiti Analysis Project, Audio Spaces, things no one had really seen before.  I remember thinking something simple like,  "Better tools = better starting point = better work".  That was the motto. 

Also, openFrameworks helped with something else I had been noticing with my work with Golan.  He and I had really been repeating ourselves in terms of codebase -- and it became increasingly apparent that building smarter, reusable elements would help save us a lot of time.  That really inspired a lot of the early work on OF -- taking the things we were learning and distilling them down into reusable tools. 

Fast forward to 2007 / 2008, and I'm working with [Medialab Madrid (now Medialab-Prado)](http://medialab-prado.es/) on long format workshops called [Interactivos?](http://medialab-prado.es/interactivos), to help promote local production of artworks and to foster a younger generation of artists and collaborators.  The role of collaboration was stressed, and the conversations that I had with them, especially folks like Marcos Garcia, Laura Fernandez and Gustavo Velera, helped me see the art making as a laboratory, art as a kind of research engine for humanity.  This process gave me the language to understand better the role of what we were doing.  It had always seemed fun, now I could describe the impact and meaning. 

Another thing that the Medialab really stressed was collaboration, and I recall this having a huge, positive influence in my thinking.  I had always been jealous of musicians, and how a musician can just take their instrument, come join a new group and jam.  It seems like the forming of groups leads to better communication and progress.  And also, making the work on your own, or even in pairs like Golan and I is really tedious.  I found that I enjoyed better this process of getting groups of people together, with potentially different skill sets, interests or strengths  and seeing what comes out of it.  I taught 4 of these 2 week workshops and  most every single group coalesced into something great.  I started to think more positively about the role of an artist not as an individual but as a good team member, and even myself as a curator of teams. 

So that's where sharing comes from for me.  It's a way to show people, "hey this isn't so hard", or "check out this thing I discovered".  It's centered on demystifying.  It's about better tools for people, better starting points.  It's about not having to repeat ourselves over and over again.  It's about collaboration, and the work itself as a lab, about being able to build on each other's strengths.

### On your website it says "[Zach] wants you surprised. His work uses technology in a playful way to break down the fragile boundary between the visible and the invisible." This is accurate for your older work, but today I feel like it is secondary to what you spend most of your time doing: sharing. Has your focused changed, or is this desire for surprise simply complement your process? Is one more important than the other?

I have to disagree a bit with this question. I feel like my work constantly changes -- for the simple fact that what people want to pay me to do changes :)  This is my passion, but it's also my job.

Sometimes, I'll have a year where I make an installation, such as [Drawn](http://thesystemis.com/projects/drawn/), where all I do is tour, performing it across europe or japan, installing it in festivals in South America, etc.  Other times, I have year where I just give openFrameworks workshops, or give talks.  These things seem to happen yearly for me, and they just represent a shift in thinking.  Also, sometimes I might gravitate away from making artworks and towards developing tools.  It really varies, but it seems to happen year to year.  

At the same time, I feel I'm still very interested in wonder and surprise, but understand that how we get there might not always be the same mechanics.  For example, this last year I have been giving talks really, kind of incessantly, because of the success of the EyeWriter project, and I've noticed that I'm able, when doing it well, to really channel TEMPT, his message, energy, will and determination to people via talking. This also, when done right, has the potential to create wonder in audience members.

The medium changes, but the idea is still the same.  Same thing in workshops -- it starts usually with dry, technical details but when done well participants are making magic.  See for example, in [this video from iMal](http://vimeo.com/5030781), the wings on Theo that someone made, and tell me that's not also about wonder!

In 2007, I was at this opening for a show at the ICC in Tokyo that [Golan and I made for children](http://www.flong.com/images/gl_exhibitionspic.jpg) and the opening was extremely chaotic and fun, hundreds of kids and families.  At one point, this grandmother grabbed me by the hands and said, in extremely broken english, "you are giving the children good dreams".  It had a profound impact on me, and I think that's what I'm trying to do, in my own work, in how I show the work and in how I help other people make work.

### At the moment you have 1800+ posts on the openFrameworks forum. But you're also a professor at Parsons, always making new work, and it seems like you're travelling half the year. How do you balance all of these things? There's a kind of non-self-centeredness required to keep sharing in these conditions.

Ah great question -- I'm having flashbacks to answering forum questions in airports while transferring from one flight to another :)

It's crazy hard.  I feel like I am always behind, mostly because I am.  I think you've recently experience a bit of this, no? Not keeping up with emails, getting several time zones away from comfort, etc.  Crazy flights.  Waking up in a hotel room completely lost.  Funnily enough I am typing this on a 12 hour flight from tokyo, so thinking about the ridiculous condition of how rootless my life is.  On a personal note, it's mad hard on relationships and I've felt it always impossible to have good balance in my life.

At the heart, I have an inherent inability to say no.  I guess this is restlessness?  There's some great quote, from Pascal:  "All unhappiness of man stems from his inability to sit quietly in his room."

I love seeing new things happen.  I love making new works.  And I'm curious about places I've never been.  All this leads me to reply "yes" too often.  Teaching helps with this, however.  It means I have to be in new york at least once a week, or missing a class, once every two weeks.  That leads to a bit of a rhythm that helps.  It's useful to have home base.

I do have to admit that I'm jealous of artists like [Julien Maire](http://julienmaire.ideenshop.net/) who produces such monumental work, and is able to spend one year making one thing.  It's a kind of dedication, patience and space I'd love to have, but the more I know myself, the more I realize that I couldn't do that.  I also have friends like Amit Pitaru who basically hit the reset every two years, and start a new profession.  I would love to do that also, but I know it's not me. 

There are some plus sides to this lifestyle however.  For things like openFrameworks, where community is important, it's crucial to meet people face to face.  Even if we are working online, through tools like Vimeo, GitHub Twitter, we don't really know each other until we've been able to shake hands, laugh about something and share a beer.  I can't emphasize just how important this kind of outreach for community is, and how it's helped shape OF.  Face to face is still the gold standard to doing any kind of collaboration. 

The plus side of travel is that you develop friendships and partnerships that transcend normal boundaries.  For example, I met the Medialab Madrid in 2005 when I setup Messa di Voce at a festival, and this kicked off multiple years of collaboration.  You meet people who take an interest and stake in your work, and who you grow older with.  It's had a phenomenal impact.  [Arturo Castro](http://arturocastro.net/), who is now a crucial part of the openFrameworks team, I met when I taught a Processing workshop at OFFF in 2006.  If we hadn't met face to face, I'm not sure if we'd be able to have had the collaboration we've had.  He's had such a huge impact on openFameworks, our way of thinking, and I'm hard pressed to imagine an alternate reality where we hadn't met.  In Japan, just now, I was working with the OF community (teaching a large workshop there) and working with [Daito Manabe](http://daito.ws/) who I met at a sort of epic drinking party in Tokyo in 2007.  For years now, we've been collaborating on projects, and it's great to see how we are growing older together.  It's an important feeling -- longer term collaboration with people around the world, and I think it can only happen well from travel.

Finally, saying yes to many things means lots of chances for success and failure.  I succeed enough, people giving me feedback about how the work effects them, etc but I embrace failure too.  I recently gave a talk in Madrid about failure, and how crucial it is to making things.  It's honestly the stuff I remember about my life too -- missing a flight, having software crash,  having camera lenses rotate out of focus because of some intense subwoofer, performing with lousy speakers or silently when I wanted sound,  hitting the wrong keys, etc.  The end of my talk sums it up, "a world without heartbreak is a world without heart".  

In terms of balance I have no idea.  I feel constantly like [the guy who is spinning the balancing plates and just have to move faster then the plates](http://www.youtube.com/watch?v=Zhoos1oY404). 

### The new version of openFrameworks, which has been on the verge of release for months now, looks cleaner and more robust every day. But code you share on the forum might be hacked together, and filled with comments admitting as much. At what point does it become a priority to share code that is well thought out rather than just helping someone quickly?

I think both are absolutely crucial -- I think of code as a teaching tool.  Let's look at this chunk, what is it about?  For example, a kernel for computer vision.  Let's take a look at the kernel, then talk about the process of convolution.  My approach is, what is the simplest and most sincere way we can talk about this, so that someone who doesn't have the math background can get into it.  In that case, it's important to think of code as entry point to a conversation. And for beginners, especially, clarity and simplicity are crucial. 

At other times, I see code as the "patch", the band-aid the helps get to the required destination -- it's usually there that hacked up, pseudo code serves the trick and the velocity of the answer is just as important as the quality of the code.  Theres a great 4-chany image I saw somewhere, of an auto racer wearing this jacket with a million patches on it and the caption said, "Patches speak louder then words" and sometimes I feel this way.  Let's hack it quickly.  When you are beginner the speed of jumping the hurdles you hit is crucial, because you hit them so often.  Sometimes I find myself writing pre-espresso code on the forum, just because I felt that if I waited until after my morning coffee it would be too long. 

I really think there are responsibilities for both. 

### There is a kind of unspoken agreement in the open source community: people look down on taking without giving something back. For a long time openFrameworks was unlicensed, and it was only this implicit understanding governing the use of OF. At one point, I vaguely remember some anti-license sentiment even. What changed?

Ok this is a very interesting question, and it relates to our relationship to the free software / open source movement.  Even though the energy around open source had a profound effect on me in 2004, I remember feeling very anxious about the aggressiveness of the free software  movement and thinking as we do get into open source, I'd like to leave the politics behind. 

As a developer, I want to respect the rights of other developers -- and I started to perceive licenses like GPL as really infringing on your ability to do, "whatever you want".  Our approach was just to not deal with this at all and put the code out there.  I had a vague notion of public domain, but later when I met some experts I came to understand this isn't legally valid.  But at least, that's where our heads were at with not having a license.

This conflict really came to a head two years ago at [a conference about open source hardware](http://www.banffcentre.ca/programs/program.aspx?id=888&p=faculty) held in Canada, at the Banff Institute.  This was a great event to debate how OS hardware could find the same kind of legal protections that OS software employs so well (i.e., you can see OS software as a kind of legal hack, taking the fact that anything you write is copyrighted, and inverting it so that you give people permission to use what you've written with a license).  Hardware is trickier, and so we were debating how to approach it. 

At this event, there was a wide array for people, including some zealous free software fanatics.  "Microsoft is my enemy" someone said.  Fine, I can deal with that.  But at one point, there was a presentation from a representative from [Freeduino](http://www.freeduino.org/freeduino_open_designs.html), an open source [Arduino](http://www.arduino.cc/) design, and he was knocking the Arduino team for having their name copyrighted and not having their designs open when they were just getting started.  I was absolutely incensed -- I think it's ok and natural to hate on companies like Apple or Sony, but a couple of developers making something in their basement?  They have no idea, just like we, with OF had no idea what it would become.  It increased my anxiety about free software people.  At one point I brought up the [GRL's Laser Tag](http://graffitiresearchlab.com/projects/laser-tag/) -- which is released under a "don't use this for advertising" license -- in response to a participant's nervousness about open sourcing her analog synthesizer design. She was wondering what would happen if a company produced this much cheaper then she could due to economies of scale.  This idea was ripped apart by the free software folks, who understandably have a very nuanced and legalistic view of OS licenses and clauses. 

All of this led to me be very vocal, and announce my apprehension to get involved in the license question.  I was vocal about how we didn't have a license at all, because overall the politics just gave us a really bad feeling.  Unfortunately, one of the participants in the workshop, who runs [an open source art festival in Norway](http://www.piksel.no/), didn't take to kindly to this, and the next year, participants to the festival that had projects that used OF were told, in a pretty aggressive way, that they were disinvited.  Feeling disappointed that my "we're too cool for this politics" attitude was potentially hurting other artists, I joined the mailing list, and worked with the people there to get OF to an acceptable license state.  We worked over the course of several weeks to remove offending libraries and to get it to a point that would be acceptably considered OSS.

Later, Mushon Zer-Aviv invited me to talk about this at [Eyebeam](http://upgrade.eyebeam.org/2009/10/free-as-in-what/), and in the audience were some of the friendliest free software folks I have ever met, and in the Q and A from the talk, there were so many good points, about how much good this movement has achieved -- and I realized that so much of my apprehension about licenses and OS culture has to do with the presentation, the politics and not the content.  Also preparing for the talk (I was afraid I would be shredded to pieces) made me much more knowledgable about the context and history.  

So essentially, this conflict has led to a bit of a shift in understanding.  I'm still an advocate of, "do whatever you want" which is why we use the [MIT license](https://secure.wikimedia.org/wikipedia/en/wiki/Mit_license) for OF. 

### There was [some discussion recently](http://blog.blprnt.com/blog/blprnt/angry-birds-box2d-an-opensource-holiday-wish) about Angry Birds not giving credit to Erin Catto, the creator of the Box2d physics engine, an essential part of the game. But I've never heard this kind of discussion about openFrameworks, despite heavy usage in large scale commercial installations. Why do you think that is?

I think the Catto thing is interesting, because it's super clear that so many of these great games are using Box2d, that the work from that project is having a profound impact on game culture generally.  The physics in many cases is as important as the game mechanics .  And in the case of Box2d, there aren't many competitor projects (Chipmunk comes to mind, but I can't think of a commercial 2d physics library that's used as widely).  Box2d solves a very specific need, and it's so clearly identifiable.  openFrameworks is less identifiable, which is a product of it being a light framework that people can push in different directions.  

One thing I've been extremely fond of is [CreativeApplications.net](http://creativeapplications.net/) and how they really focus on the tools that help make the projects, even encouraging artists to list addons and different code bases that are helpful.  Credit is extremely important, and it's free.  I think, although the link you mention is a wish for Erin Catto to get paid, in the end, all he wanted from Angry Birds was credit, which they agreed to.  We don't get upset if people don't credit OF, but we are obviously very thankful if they do, and it's a good payback for the community. 

### One of the scariest and most exciting things about sharing work is not  knowing what it will used for. What are the most surprising ways you've seen your work used?

I think Zach Gage's [Lose/Lose](http://stfj.net/art/2009/loselose/) might be the most surprising work for me.  It's a video game where when you shoot characters it deletes files on your hard drive. When you die, it deletes the game itself.  So no matter what, you loose.  I love this because it's an extremely simple, radical investigation on why people put themselves into dangerous situations, things they know will only end up lose / lose.  I thought no one would play this game, but tons of people have.  Zach actually exhibits their names / high scores in exhibitions, it's a bit insane that all these people have done that.  For the longest time I had been thinking about the destructive power of C++ -- because it's not running in a sandbox like Java, you can do some seriously evil stuff from within the program  (system("[rm -rf *](http://justpasha.org/folk/rm.html)") anyone?).  This project harnessed that energy in a beautiful and poetic way.  I think when code projects get into radical and poetic territory, interesting things happen. 

I'm also deeply surprised to see some of the film / hollywood uses for OF.  I just caught Josh Nimoy's [write up for TRON](http://jtnimoy.net/workviewer.php?q=178) which was absolutely inspiring and I never thought the tool could be used for that.  I remember when we met [Keith Pasko](http://www.keithpasko.com/) in LA, and he showed us things like the Black Eyed Peas music video he worked on that used openFrameworks.  Likewise, at the OF developers conference in Pittsburgh this winter, Keith showed several insane commercials that he had used the tool for.  It's really impressive, and because we are not west coast based, sometimes we loose track of the community there.  It's exciting to see that it's making an impact on visual culture that way. 

Finally, I was pleasantly surprised when, in 2008, Theo and I went to Japan to teach an [openFrameworks workshop](http://www.ycam.jp/interlab/2008/07/ycam-interlab-camp-vol1openfra.html) and we noticed that half of the students had this funky branch of the library we'd never seen before.  Basically, a Japanese professor had modified it a bit, adding some libraries, changing it slightly and released it, and that link was pretty high searching for OF in Japanese.  I felt then, it's got a life and energy of it's own.  It made me really happy, like I guess how a product designer would feel if they saw a creative mod on something they had made. 

### Who would you identify as your peers, and who are your antecedents? Who inspires you when it comes to sharing work?

So really directly, I studied under [Golan Levin](http://flong.com/) at Parsons.  Golan studied under [John Maeda](http://www.maedastudio.com/index.php)  So I feel a really direct lineage there.  (We joke that he has a Maeda number of 1, I have a number of 2, and my students have a number of 3, etc).  Also, there's a funny pattern -- Maeda is 5 years older than Golan, Golan is 5 years older than me, I'm 5 years older than Theo Watson (who studied with me).  Anyway, Maeda, and the work of the [Aesthetics and Computation Group](http://acg.media.mit.edu/) are at the heart, I think, an investigation the poetics of computational form and it informs my way of thinking about code as a medium.  I also am deeply appreciative of projects like [Design by Numbers](http://dbn.media.mit.edu/) that informed my thinking about code and education early on when I got started with this. 

Working with Golan also had a profound impact on me, seeing someone so dedicated to researching the history of what we are doing, and who had this insane work ethic, it really inspired me.  When we worked on projects together in Linz, he would stay up all night coding, and I would come in early in the morning and work through the day, we were like this insane 24 hour shop. 
 
I also am deeply inspired by the pioneers of Flash / ActionScript hacking.  I think I mentioned some of them earlier in the interview  (Joshua Davis, Yugo Nakamura, Jared Tarbell, Erik Natzke, Amit Pitaru), but it's how I got into this.  I love the culture of sharing that existed.  Also, I spent sometime on [dreamless.org](https://secure.wikimedia.org/wikipedia/en/wiki/Joshua_Davis_%28web_designer%29#Dreamless) which was a kind of BBS for artistic hacking at the time, and full of crazy JavaScript hacking, as well as interviews with different artists and people working together sharing code. 

In terms of peers -- it's the [OF community](http://openframeworks.cc/) of course.  Sorry if this is meta, but [you](http://www.kylemcdonald.net/) are big inspiration -- seeing how open your process is and how obsessive you are about documenting.  

[Theo Watson](http://theowatson.com/) of course, because he has such a great sensibilities and humor.  His [partnership with his wife Emily Gobeille](http://design-io.com/) is my model of what a creative team should be.  [Evan Roth / F.A.T. Lab](http://fffff.at/) for bringing humor and popular culture to the foreground, and for relentlessly making.  

Then it's the countless awesome people on GitHub, Vimeo, Flickr, YouTube saying "check out what I just made."  There's too many to list here without offending anyone I would leave off, but they are the diverse crew of people taking the things they learn and giving them back. 

### Your  background is originally in sculpture and the fine arts. I remember you  saying once that the "printshop vibe" has influenced your idea of what  sharing can be. What can digital communities learn from more traditional sharing communities?

Funny, last night I was drinking with some friends in tokyo, and one guy in the group (who is friends with someone I knew back the late 90s in NYC, but whom I haven't been in close touch with) told me that his friend Risa had introduced me as her "painter friend".  It made me really happy -- she knew me as someone who was always putting ink on paper and blowing it around to make funky shapes.  Art school days. 

Basically, my background is fine arts, and when I got to New York in 1997, the first thing I did was find a printshop to go volunteer at.  This is before I had ever made a print. I just loved the idea of printmaking, the look of it, and wanted to know more about it.  I just called up [Bob Blackburn's studio](http://www.efanyc.org/rbpmw/) and started to volunteer, moving litho stones, cleaning up the shop, etc.  I got a feeling of great energy just being around everything there.  Later, at Hunter College, where I did my undergraduate, I would spend countless hours at the printshop digging into different etching techniques, making woodcuts, etc.  I basically grew up in that printshop.  It's still some of the happiest and most peaceful memories I have -- working there, listening to classical music and sharing lemon poppy seed muffins with my teacher professor [Vinny Longo](http://www.vincentlongoartist.com/) who used to invite students into his office for tea. 

Anyway, nostalgia aside, at the printshop it's by default a collaborative space.  You can't own your own press.  They are massive, so you have to share them with other people.  I love this idea of public art making, we are working in the same space, and sharing the same space to make things.  This leads to impromptu discussion, sharing of resources, explanation of ideas.  Art isn't sitting alone in your attic, but rather art as a group process, as an open process.  Process is also important, because there are so many steps for certain techniques, we spent much of our time sharing recipes, helping each other and learning. 

That had a profound impact on how I treat my time working on this new medium.  Different tools, but essentially the same approach:  sharing recipes, helping each other and learning.
